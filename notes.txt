用webpack的话，一般就会输出一个单独的bundled文件叫做 index.js，
输入文件是main.js

loaders就是一个能够处理文件的功能。babel也是一个loader

要用webpack的话一般要下载webpack－devserver， 该配置文件也用devServer的一项。

当你看到一个包涵开头和尾头的正斜杠，这就是regexp
http://www.w3schools.com/jsref/jsref_obj_regexp.asp

如果出现react错误叫： Refusing to install react as a dependency of itself，这意味着应该强逼安装，不然的话也会出现其他失败倒入该文件的错误
ERROR in ./main.js
Module not found: Error: Cannot resolve module 'react' in /Users/macbookpro/Projects/react_practice

JSX 是一个类似于HTML语言，React的components经常使用的. 实际上，jsx是方便编写HTML的javascript，
REACT 本身会理解JSX能把他transpile成对应的react语法

在新的JS里（es6）如果导入一个模块，因为实际上是个Class，所以会出现大写字母开头
例如 import React from 'react';
不知道这是不是个人的习惯

在JS里如果不需要使用一个模块导出的东西（class），你并不要用module.export （如export default App)
如果该文件本身进行某些操作，光import就足够起作用

默认情况下，当一个React应用程序编译以后，一个节会有如下面的data－reactid属性
<button data-reactid=".1">

在使用属性时，不要用名为“value”的属性， value 本身是一个原本 HTML属性

Mixin, 允许新的类或成分遗传其他功能。比如
Mixin1Functionality －》 Label
Mixin1Functionality －》 Button
Mixin1Functionality －》 P

在字符串前面添加一个＋号，这会创造一个Number类
ex val={+this.state.green}

如果要用浏览器运行react，还是要在《Head》导入相应的React包
如： 
<script src="https://fb.me/react-0.14.7.js"></script>
<script src="https://fb.me/react-dom-0.14.7.js"></script>

调试react的时候，很有帮助的插件就是Chrome react插件。可以浏览React虚拟结构

babel-cli 可以帮你把原来的react或es6一次又一次转吗 如
babel --preset react input_file1.js -o dist/file1.js --watch

js中处理路径的时候，一般要使用__dirname 如
"attr" : __dirname + "/following_path"


reactify 模块是用来把 JSX 转化成 JS

Views == React Components
Controller-View == 跟 React Component (包涵子Component)

－－－－－－－－－－－－－－－测试－－－－－－－－－－－－－－－－
要测试react的HTML（view）结果，最好能使用 ’react－addons－test－utils‘
该模块提供一个shallow renderer（表示DOM）功能。如：
import ReactTestUtils from 'react-addons-test-utils';

const renderer = ReactTestUtils.createRenderer();
renderer.render(<SomeComponent aProp={10} />);
const actual = render.getRenderOutput().type;
// 上面的getRenderOutput() 只是输出一个对象
// 可以参考任何函数或值, 如
// render.getRenderOutput().props.className.includes('fb');
// ** includes 是 es2015扩充了string的一个函数
expect(actual).ToEqual('a'); 
// NOT STRING, a is the node


测试的时候尽量要把方便性质的函数，输出到个别方便（utilities）文件
在某种程度上可以使得两个部分更加decoupled， 也能更方便测试个别函数

用expect跟react一起来测试并不方便。因为expect本身的Error diff 不支持
React的JSX比较。Error diff的表现就是一大堆对象。 所以要使用的更好必须
使用expect－jsx 然后扩充expect expect。extends（expectJSX） 
这样才表现更漂亮的Error diff

可以用 nested describe 块， 减少重复代码。nested 块里写一下tests
利用的共同功能如
describe('The Like button') {
	describe('should alternate class states'){
		let classOn = (isOn) => {
			const renderer = TestUtils.createRenderer();
			renderer.render(<LikeButton active={isOn} />);
			return renderer.getRenderOutput().props
				.className.includes('Like--active');
		};

		it('should not show when off'){
			expect(classOn(false)).toBe(false);
		};

		it('should show when on'){
			expect(classOn(true)).toBe(true);
		};
	};
};
